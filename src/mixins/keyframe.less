.mixin-keyframe(@values, @mod) {
  & when (length(@values) = 4) and (length(extract(@values, 1)) = 1) {
    .mixin-calculate-props(@values, @mod);
  }
  & when not (length(@values) = 4) {
    .mixin-calculate-multiple-props(@values, @mod);
  }
  & when not (length(extract(@values, 1)) = 1) {
    .mixin-calculate-multiple-props(@values, @mod);
  }
}
.mixin-calculate-props(@propVals, @mod) {
  @propName: e(extract(@propVals, 1));
  @str: extract(@propVals, 2);
  @from: extract(@propVals, 3);
  @to: extract(@propVals, 4);

  @newValue: @from + (@to - @from) * @mod;
  @newStr: replace(@str, 'XX', @newValue);

  @{propName}: e(@newStr);
}

.mixin-calculate-multiple-props(@props, @mod) {
  .mixin-for(@props);
  .-each(@value) {
    .mixin-calculate-props(@value, @mod);
  }
}

.mixin-for(@i, @n) {.-each(@i)}
.mixin-for(@n)     when (isnumber(@n)) {.mixin-for(1, @n)}
.mixin-for(@i, @n) when not (@i = @n)  {
  .mixin-for((@i + (@n - @i) / abs(@n - @i)), @n);
}

.mixin-for(@array)   when (default()) {.mixin-for-impl_(length(@array))}
.mixin-for-impl_(@i) when (@i > 1)    {.mixin-for-impl_((@i - 1))}
.mixin-for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}
